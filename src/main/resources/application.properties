spring.application.name=ordersystemapp

# JDBC/H2/JPA configuration

logging.level.org.springframework.jdbc=DEBUG
spring.h2.console.enabled=true
spring.datasource.generate-unique-name=false
spring.datasource.name=ordersystem
spring.jpa.hibernate.ddl-auto=update

# Kafka configuration

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAPSERVERS}
spring.kafka.order.topic.name=order-topic
spring.kafka.producer.retries=20
spring.kafka.producer.retry.backoff.ms=1000
spring.kafka.producer.delivery.timeout.ms=30000

# Allow idempotence and set to all acknowledgements to ensure no duplicated messages

spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.acks=all

spring.kafka.consumer.group-id=order-group-id
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# Allow JSON deserialization

spring.kafka.consumer.properties.spring.json.trusted.packages=com.ibm.processor.orderapp.dto
spring.kafka.consumer.properties.spring.json.value.default.type=com.ibm.processor.orderapp.dto.CreateOrderDto

# Kafka reads only new messages when a new consumer group is introduced

spring.kafka.consumer.auto-offset-reset=latest

